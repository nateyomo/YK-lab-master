{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Hip Adductor Muscles\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        ":::{layout-ncol=\"2\"}\n",
        "\n",
        "### Primary\n",
        "\n",
        "The *Adductor group* refers to the 5 Primary adductor muscles @bielTrailGuideBody2019:\n",
        "\n",
        "- [Pectineus]({{< var ref-pectineus.path >}}) @neumannKinesiologyMusculoskeletalSystem2017\n",
        "- [Adductor Longus]({{< var ref-adductor-longus.path >}}) @neumannKinesiologyMusculoskeletalSystem2017\n",
        "- [Gracilis]({{< var ref-gracilis.path >}}) @neumannKinesiologyMusculoskeletalSystem2017\n",
        "- [Adductor Brevis]({{< var ref-adductor-brevis.path >}}) @neumannKinesiologyMusculoskeletalSystem2017\n",
        "- [Adductor Magnus]({{< var ref-adductor-magnus.path >}}) @neumannKinesiologyMusculoskeletalSystem2017\n",
        "\n",
        "### Secondary\n",
        "\n",
        "- [Biceps Femoris Long Head]({{< var ref-biceps-femoris-long-head.path >}}) @neumannKinesiologyMusculoskeletalSystem2017\n",
        "- [Gluteus Maximus (inferior/ posterior fibers)]({{< var ref-gluteus-maximus.path >}})  @neumannKinesiologyMusculoskeletalSystem2017\n",
        "- [Quadratus Femoris]({{< var ref-quadratus-femoris.path >}}) @neumannKinesiologyMusculoskeletalSystem2017\n",
        "- [Obturator Externus]({{< var ref-obturator-externus.path >}}) @neumannKinesiologyMusculoskeletalSystem2017\n",
        "\n",
        ":::\n"
      ],
      "id": "9b48d29e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "    #| label: tbl-primary-hip-adductor-oian\n",
        "    #| warning: false\n",
        "    #| message: false\n",
        "    #| echo: false\n",
        "    #| tbl-cap: \"Primary hip adductors\"\n",
        "\n",
        "    from pathlib import Path\n",
        "    import pandas as pd\n",
        "    from pyprojroot import here\n",
        "    from IPython.core.display import display, HTML\n",
        "\n",
        "    # Set the path for the script file\n",
        "    script_file_path = here(\"scripts/process_oian_table.py\")\n",
        "\n",
        "    # Check if the script file exists\n",
        "    if script_file_path.exists():\n",
        "        import sys\n",
        "        sys.path.append(str(script_file_path.parent))  # Add the directory of the script to the system path\n",
        "\n",
        "        from process_oian_table import process_oian_table  # Import the specific function\n",
        "\n",
        "        # Define the column to filter by and the identifiers to include\n",
        "        filter_column = 'functional_group_identifier'  # Choose the column you want to filter by\n",
        "        filter_identifiers = ['primary_hip_adductor']  # Replace with actual identifiers you want to include\n",
        "\n",
        "        # Call the function to get the HTML table with filtering\n",
        "        html_table = process_oian_table(filter_column=filter_column, filter_identifiers=filter_identifiers)\n",
        "\n",
        "        if html_table:\n",
        "            # Render the HTML table for display\n",
        "            display(HTML(html_table))  # Use display to render the HTML properly\n",
        "    else:\n",
        "        print(\"Script file does not exist. Please check the path.\")"
      ],
      "id": "1cff1155",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "    #| label: tbl-secondary-hip-adductor-oian\n",
        "    #| warning: false\n",
        "    #| message: false\n",
        "    #| echo: false\n",
        "    #| tbl-cap: \"Secondary hip adductors\"\n",
        "\n",
        "    from pathlib import Path\n",
        "    import pandas as pd\n",
        "    from pyprojroot import here\n",
        "    from IPython.core.display import display, HTML\n",
        "\n",
        "    # Set the path for the script file\n",
        "    script_file_path = here(\"scripts/process_oian_table.py\")\n",
        "\n",
        "    # Check if the script file exists\n",
        "    if script_file_path.exists():\n",
        "        import sys\n",
        "        sys.path.append(str(script_file_path.parent))  # Add the directory of the script to the system path\n",
        "\n",
        "        from process_oian_table import process_oian_table  # Import the specific function\n",
        "\n",
        "        # Define the column to filter by and the identifiers to include\n",
        "        filter_column = 'functional_group_identifier'  # Choose the column you want to filter by\n",
        "        filter_identifiers = ['secondary_hip_adductor']  # Replace with actual identifiers you want to include\n",
        "\n",
        "        # Call the function to get the HTML table with filtering\n",
        "        html_table = process_oian_table(filter_column=filter_column, filter_identifiers=filter_identifiers)\n",
        "\n",
        "        if html_table:\n",
        "            # Render the HTML table for display\n",
        "            display(HTML(html_table))  # Use display to render the HTML properly\n",
        "    else:\n",
        "        print(\"Script file does not exist. Please check the path.\")"
      ],
      "id": "555667e0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Anatomical Layers\n",
        "\n",
        "## Anterior view\n",
        "\n",
        "When viewed anteriorly, we can break down the primary adductor group into 3 layers:\n",
        "\n",
        "1. Anterior Superficial (Most anterior): Pectineus and adductor longus\n",
        "    1. The gracilis is also superficial, but lies more medial than the pectineus and adductor longus\n",
        "1. Anterior Intermediate: Adductor brevis\n",
        "1. Anterior Deep (Most posterior): Adductor magnus\n",
        "\n",
        "::: {.callout-tip}\n",
        "Due to the Adductor magnus' broad shape and posterior location, it is called the \"floor of the adductors\" @bielTrailGuideBody2019.\n",
        ":::\n",
        "\n",
        "# Foundational Exercises\n",
        "\n",
        "- [Hip Adduction / Wall Assist / Hand Resist](#hip-adduction--wall-assist--hand-resist)\n",
        "\n",
        "## Hip Adduction / Wall Assist / Hand Resist\n",
        "\n",
        "<!-- Read hip_msk for more info or updated info -->\n",
        "\n",
        "\"Using a wall to assist in performing hand resistant hip adduction is not a true adduction movement. The adduction is coming from flexion + abduction + rotation position into flexion/adduction/rotation AROM. The goal is to activate hip adduction to release muscle guarding into greater pROM hip abduction range\" @jonesProjectFoundations2025.\n",
        "\n",
        "### Setup\n",
        "\n",
        "The setup is similar to the *wall sit foundational exercise* but instead of a \"V\" position of the lower extremity, we employ the \"butterfly\" position @jonesProjectFoundations2025.\n",
        "\n",
        "- Sit at the crease of the wall and the floor\n",
        "- Roll your hips forward (Anterior pelvic tilt) in order to push your glutes as far into the crease as possible\n",
        "- Activate your abdominals by drawing your naval towards the wall without losing your hip position\n",
        "- Retract and depress your shoulders\n",
        "- Look forward (chin tuck) and bring your head backwards (retract) to hold it against the wall\n",
        "- Bend both knees and externally rotate the hips so that the plantar feet are in contact with eachother at midline.\n",
        "- Place both hands on the medial surface of each knee\n",
        "- Apply pressure to create tension on the hip adductors and feel for feedback"
      ],
      "id": "98ffbd7f"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/nathanielyomogida/miniconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}